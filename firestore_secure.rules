rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is family member
    function isFamilyMember(familyId) {
      return request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.get('memberIds', []);
    }
    
    // Helper function to check if user is family creator
    function isFamilyCreator(familyId) {
      return request.auth != null && 
        request.auth.uid == get(/databases/$(database)/documents/families/$(familyId)).data.get('createdBy', null);
    }

    // Connection codes - secure lookup mechanism
    match /connection_codes/{codeId} {
      // Anyone can read connection codes (needed for child app joining)
      allow read: if request.auth != null;
      // Only authenticated users can create (family setup)
      allow create: if request.auth != null;
      // No updates or deletes allowed
      allow update, delete: if false;
    }

    // Families - progressive security model
    match /families/{familyId} {
      // CREATION: Allow family creation by authenticated users
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.get('createdBy', null) &&
        request.auth.uid in request.resource.data.get('memberIds', []);
      
      // READING: Family members OR during initial setup process
      allow read: if request.auth != null && (
        // Existing family members
        request.auth.uid in resource.data.get('memberIds', []) ||
        // Family creator during setup
        request.auth.uid == resource.data.get('createdBy', null) ||
        // Child app during joining process (temporary, secure via connection codes)
        exists(/databases/$(database)/documents/connection_codes/$(resource.data.connectionCode))
      );
      
      // UPDATES: Family members can update, plus joining mechanism
      allow update: if request.auth != null && (
        // Existing family members
        request.auth.uid in resource.data.get('memberIds', []) ||
        // Child app joining (adding themselves to memberIds)
        (request.auth.uid in request.resource.data.get('memberIds', []) &&
         !request.auth.uid in resource.data.get('memberIds', [])) ||
        // Family creator making updates
        request.auth.uid == resource.data.get('createdBy', null)
      );
      
      // DELETION: Only family members
      allow delete: if request.auth != null && 
        request.auth.uid in resource.data.get('memberIds', []);

      // SUBCOLLECTIONS: Secured to family members only
      match /meals/{document=**} {
        allow read, write: if isFamilyMember(familyId);
      }

      match /recordings/{document=**} {
        allow read, write: if isFamilyMember(familyId);
      }

      match /keys/{document=**} {
        allow read, write: if isFamilyMember(familyId);
      }

      match /child_devices/{document=**} {
        allow read, write: if isFamilyMember(familyId);
      }

      // Catch-all for other subcollections
      match /{subcollection}/{document=**} {
        allow read, write: if isFamilyMember(familyId);
      }
    }

    // User profiles - own access only
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // FCM tokens - authenticated users (needed for notifications)
    match /fcmTokens/{tokenId} {
      allow read, write: if request.auth != null;
    }
    
    // Subscriptions - own data only
    match /subscriptions/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Analytics - authenticated write only
    match /analytics/{document=**} {
      allow read, write: if request.auth != null;
    }
    
    // App settings - read only
    match /appSettings/{document=**} {
      allow read: if request.auth != null;
      allow write: if false;
    }
    
    // Test collection - authenticated access (remove in production)
    match /test/{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}