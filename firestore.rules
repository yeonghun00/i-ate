rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ========================================
    // CONNECTION CODES COLLECTION
    // ========================================
    // Critical for child app to find family by 4-digit code BEFORE approval
    // Parent creates, child reads and deactivates

    match /connection_codes/{codeId} {
      // READ: Allow ANY authenticated user to query/read connection codes
      // This is REQUIRED for child app line 213-217:
      //   .where('code', isEqualTo: '1234')
      //   .where('isActive', isEqualTo: true)
      // Security: Codes expire after 2 minutes (parent app handles timeout)
      allow read: if request.auth != null;

      // CREATE: Parent app creates during setup (initial_setup_screen.dart:142)
      allow create: if request.auth != null &&
                       request.resource.data.keys().hasAll(['code', 'familyId', 'elderlyName', 'isActive', 'createdAt']) &&
                       request.resource.data.isActive == true;

      // UPDATE: Child app deactivates after approval (child_app_service.dart:360-364)
      // Only allow changing isActive, usedAt, usedBy
      allow update: if request.auth != null &&
                       request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['isActive', 'usedAt', 'usedBy']);

      // DELETE: Parent app deletes expired codes (initial_setup_screen.dart:309)
      allow delete: if request.auth != null;
    }

    // ========================================
    // FAMILIES COLLECTION
    // ========================================

    match /families/{familyId} {

      // Helper: Check if user is a family member
      function isMember() {
        return request.auth != null &&
               'memberIds' in resource.data &&
               resource.data.memberIds is list &&
               request.auth.uid in resource.data.memberIds;
      }

      // Helper: Check if user is the creator
      function isCreator() {
        return request.auth != null &&
               'createdBy' in resource.data &&
               request.auth.uid == resource.data.createdBy;
      }

      // Helper: Check if document is not approved yet
      function isPending() {
        return resource.data.get('approved', null) == null ||
               resource.data.approved == false;
      }

      // Helper: Check if this is a child app approval operation
      function isApprovingChild() {
        return request.auth != null &&
               // User is adding themselves to memberIds
               request.auth.uid in request.resource.data.get('memberIds', []) &&
               // User was NOT in memberIds before
               !(request.auth.uid in resource.data.get('memberIds', [])) &&
               // Only modifying approval fields
               request.resource.data.diff(resource.data).affectedKeys()
               .hasOnly(['approved', 'approvedAt', 'approvedBy', 'memberIds', 'childInfo', 'childAppUserId']);
      }

      // Helper: Check if this is a parent app recovery operation
      function isRecoveringParent() {
        return request.auth != null &&
               // User is adding themselves to memberIds
               request.auth.uid in request.resource.data.get('memberIds', []) &&
               // User was NOT in memberIds before
               !(request.auth.uid in resource.data.get('memberIds', [])) &&
               // User was the original creator OR is recovering the account
               (request.auth.uid == resource.data.get('createdBy', '') ||
                // Only modifying recovery fields
                request.resource.data.diff(resource.data).affectedKeys()
                .hasOnly(['memberIds', 'recoveredAt', 'recoveredBy']));
      }

      // ========================================
      // READ PERMISSION
      // ========================================
      // Critical: Child app needs to read BEFORE approval (line 253)
      // Allow if:
      // 1. User is in memberIds (approved member)
      // 2. OR document not approved yet (for child to see family info)

      allow read: if request.auth != null && (
        isMember() ||
        isCreator() ||
        isPending()
      );

      // ========================================
      // CREATE PERMISSION
      // ========================================
      // Parent app creates family (firebase_service.dart:155)

      allow create: if request.auth != null &&
                       request.resource.data.keys().hasAll(['familyId', 'connectionCode', 'elderlyName', 'createdBy', 'memberIds', 'isActive']) &&
                       request.auth.uid == request.resource.data.createdBy &&
                       request.auth.uid in request.resource.data.memberIds;

      // ========================================
      // UPDATE PERMISSION
      // ========================================
      // Multiple scenarios based on child app behavior

      allow update: if request.auth != null && (

        // SCENARIO 1: Child app approving connection (line 315-343)
        // This happens BEFORE user is in memberIds!
        isApprovingChild() ||

        // SCENARIO 1B: Parent app recovery (account reinstallation)
        // This happens BEFORE new user is in memberIds!
        isRecoveringParent() ||

        // SCENARIO 2: Family members updating data (after approval)
        // Parent app updates location, meals, activity
        // Child app clears alerts, updates settings
        (isMember() &&
         request.resource.data.diff(resource.data).affectedKeys()
         .hasOnly([
           // Location data (encrypted) - parent app
           'location', 'lastLocationUpdate',
           // Activity tracking - parent app
           'lastPhoneActivity', 'blastPhoneActivity', 'lastActive',
           'lastActivityType', 'updateTimestamp',
           // Battery tracking - parent app
           'batteryLevel', 'isCharging', 'batteryHealth', 'batteryTimestamp',
           // Meal tracking - parent app
           'lastMeal', 'lastMealTime', 'todayMealCount',
           // Alerts - both apps
           'alerts', 'alertsCleared', 'alertsClearedBy', 'alertsTriggered',
           'survivalAlert',
           // Settings - both apps
           'settings',
           // Child app activity
           'lastChildAppActivity'
         ])) ||

        // SCENARIO 3: Creator (parent) can update
        (isCreator() &&
         request.resource.data.diff(resource.data).affectedKeys()
         .hasOnly([
           'location', 'lastLocationUpdate',
           'lastPhoneActivity', 'lastActivityType', 'updateTimestamp',
           'blastPhoneActivity', 'lastActive',
           'batteryLevel', 'isCharging', 'batteryHealth', 'batteryTimestamp',
           'lastMeal', 'lastMealTime', 'todayMealCount',
           'alerts', 'alertsTriggered',
           'settings'
         ]))
      );

      // DELETE: Only creator can delete family
      allow delete: if isCreator();

      // ========================================
      // RECORDINGS SUBCOLLECTION
      // ========================================
      // Child app reads (line 345-374, 464)

      match /recordings/{recordingId} {
        // Helper: Get parent family memberIds
        function getFamilyMembers() {
          return get(/databases/$(database)/documents/families/$(familyId)).data.get('memberIds', []);
        }

        function getFamilyCreator() {
          return get(/databases/$(database)/documents/families/$(familyId)).data.get('createdBy', '');
        }

        // Only family members can access recordings
        allow read, write: if request.auth != null && (
          request.auth.uid in getFamilyMembers() ||
          request.auth.uid == getFamilyCreator()
        );
      }

      // ========================================
      // MEALS SUBCOLLECTION
      // ========================================
      // Parent app writes, child app might read

      match /meals/{mealId} {
        function getFamilyMembers() {
          return get(/databases/$(database)/documents/families/$(familyId)).data.get('memberIds', []);
        }

        function getFamilyCreator() {
          return get(/databases/$(database)/documents/families/$(familyId)).data.get('createdBy', '');
        }

        allow read, write: if request.auth != null && (
          request.auth.uid in getFamilyMembers() ||
          request.auth.uid == getFamilyCreator()
        );
      }

      // ========================================
      // CHILD DEVICES SUBCOLLECTION
      // ========================================

      match /child_devices/{deviceId} {
        function getFamilyMembers() {
          return get(/databases/$(database)/documents/families/$(familyId)).data.get('memberIds', []);
        }

        allow read, write: if request.auth != null &&
                              request.auth.uid in getFamilyMembers();
      }
    }

    // ========================================
    // USERS COLLECTION
    // ========================================

    match /users/{userId} {
      allow read, write: if request.auth != null &&
                            request.auth.uid == userId;
    }

    // ========================================
    // SUBSCRIPTIONS COLLECTION
    // ========================================

    match /subscriptions/{userId} {
      allow read, write: if request.auth != null &&
                            request.auth.uid == userId;

      match /events/{eventId} {
        allow read, write: if request.auth != null &&
                              request.auth.uid == userId;
      }
    }

    // ========================================
    // FCM TOKENS COLLECTION
    // ========================================

    match /fcmTokens/{tokenId} {
      // Users can read all tokens (for notification purposes)
      allow read: if request.auth != null;

      // Users can only write their own tokens
      allow write: if request.auth != null && (
        request.resource.data.get('userId', '') == request.auth.uid ||
        resource.data.get('userId', '') == request.auth.uid
      );
    }

    // ========================================
    // ANALYTICS COLLECTION
    // ========================================

    match /analytics/{document=**} {
      // Allow creating analytics
      allow write: if request.auth != null;
      // Admins only for reading
      allow read: if false;
    }

    // ========================================
    // APP SETTINGS (READ-ONLY FOR USERS)
    // ========================================

    match /appSettings/{document=**} {
      allow read: if request.auth != null;
      allow write: if false; // Admin only
    }

    // ========================================
    // TEST COLLECTION (DEVELOPMENT ONLY)
    // ========================================
    // IMPORTANT: Set to false in production!

    match /_test/{document=**} {
      allow read, write: if request.auth != null;
      // For production, change to:
      // allow read, write: if false;
    }
  }
}
