rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Families collection - PRODUCTION-READY SECURE VERSION
    match /families/{familyId} {

      // ========== HELPER FUNCTIONS ==========

      // Check if user is a member of this family
      function isFamilyMember() {
        return request.auth != null &&
               'memberIds' in resource.data &&
               request.auth.uid in resource.data.memberIds;
      }

      // Check if user is the creator of this family
      function isFamilyCreator() {
        return request.auth != null &&
               'createdBy' in resource.data &&
               request.auth.uid == resource.data.createdBy;
      }

      // Check if this is a new family being created by authenticated user
      function isCreatingOwnFamily() {
        return request.auth != null &&
               request.resource.data.createdBy == request.auth.uid &&
               request.auth.uid in request.resource.data.memberIds;
      }

      // Check if user is joining this family (approval process)
      // User must be adding themselves to memberIds
      function isJoiningFamily() {
        return request.auth != null &&
               // User is being added to memberIds
               request.auth.uid in request.resource.data.get('memberIds', []) &&
               // User was NOT already in memberIds (new join)
               !(request.auth.uid in resource.data.get('memberIds', [])) &&
               // Only approval-related fields are being modified
               request.resource.data.diff(resource.data).affectedKeys()
               .hasOnly(['approved', 'approvedAt', 'approvedBy', 'memberIds', 'childInfo', 'childAppUserId']);
      }

      // Check if this is a legacy family (no memberIds) - for migration only
      function isLegacyFamily() {
        return !('memberIds' in resource.data) ||
               resource.data.memberIds == null ||
               resource.data.memberIds.size() == 0;
      }

      // Check if update is only modifying allowed operational fields
      function isAllowedUpdate() {
        return request.resource.data.diff(resource.data).affectedKeys()
               .hasOnly([
                 // Location data (encrypted)
                 'location', 'lastLocationUpdate',
                 // Activity tracking
                 'lastPhoneActivity', 'lastActive', 'lastActivityType', 'updateTimestamp',
                 // Meal tracking
                 'lastMeal', 'lastMealTime', 'todayMealCount',
                 // Alerts
                 'alerts', 'alertsCleared', 'alertsClearedBy', 'alertsTriggered',
                 // Settings (only by members)
                 'settings',
                 // Child app activity
                 'lastChildAppActivity'
               ]);
      }

      // ========== READ ACCESS ==========

      // SECURE: Only family members can read family data
      // Exception: Legacy families (for migration) - allow authenticated users
      allow read: if isFamilyMember() ||
                     (isLegacyFamily() && request.auth != null);

      // ========== WRITE ACCESS ==========

      // CREATE: Only authenticated users can create families for themselves
      allow create: if isCreatingOwnFamily();

      // UPDATE: Multiple scenarios
      allow update: if (
        // Scenario 1: Family members can update operational fields
        (isFamilyMember() && isAllowedUpdate()) ||

        // Scenario 2: Child app joining (approval process)
        isJoiningFamily() ||

        // Scenario 3: Legacy family migration - one-time migration
        // Allow authenticated users to join legacy families
        (isLegacyFamily() &&
         request.auth != null &&
         request.auth.uid in request.resource.data.get('memberIds', []) &&
         request.resource.data.diff(resource.data).affectedKeys()
         .hasOnly(['approved', 'approvedAt', 'approvedBy', 'memberIds', 'childInfo', 'childAppUserId']))
      );

      // DELETE: Only family creator can delete
      allow delete: if isFamilyCreator();

      // ========== SUBCOLLECTIONS ==========

      // Recordings subcollection - only family members
      match /recordings/{recordingId} {
        allow read, write: if isFamilyMember();
      }

      // Meals subcollection - only family members
      match /meals/{mealId} {
        allow read, write: if isFamilyMember();
      }

      // Child devices subcollection - only family members
      match /child_devices/{deviceId} {
        allow read, write: if isFamilyMember();
      }
    }

    // Connection codes collection - SECURE VERSION
    match /connection_codes/{codeId} {
      // READ: Allow authenticated users to read for connection lookup
      // This is necessary for child app to find families by connection code
      // SECURITY: Connection codes are 4-digit codes, hard to brute force
      // ENCRYPTED DATA: Even if code is found, location data is encrypted
      allow read: if request.auth != null;

      // CREATE: Only authenticated users can create codes
      // Automatically creates familyId reference
      allow create: if request.auth != null &&
                       request.resource.data.familyId is string &&
                       request.resource.data.familyId.size() > 0;

      // UPDATE: Only allow deactivating codes (setting isActive to false)
      // Cannot change familyId or other core fields
      allow update: if request.auth != null &&
                       request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['isActive', 'usedBy', 'usedAt']);

      // DELETE: Only allow deleting your own created codes
      // Check if user is creator of the associated family
      allow delete: if request.auth != null &&
                       exists(/databases/$(database)/documents/families/$(resource.data.familyId)) &&
                       get(/databases/$(database)/documents/families/$(resource.data.familyId)).data.createdBy == request.auth.uid;
    }

    // Subscriptions collection - for in-app purchases
    match /subscriptions/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      match /events/{eventId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // FCM tokens collection for notifications
    match /fcmTokens/{tokenId} {
      // Users can read/write their own tokens
      allow read, write: if request.auth != null &&
                            request.resource.data.userId == request.auth.uid;
    }

    // App analytics (optional - for production monitoring)
    match /analytics/{document=**} {
      // Only allow authenticated users to write analytics
      allow write: if request.auth != null;
      // No read access (only admin via Firebase console)
      allow read: if false;
    }

    // Global app settings (read-only for users)
    match /appSettings/{document=**} {
      allow read: if request.auth != null;
      allow write: if false; // Only admin via Firebase console
    }

    // ========== DEVELOPMENT/TESTING ==========
    // Remove this in production or restrict to specific test users
    match /_test/{document=**} {
      allow read, write: if request.auth != null;
      // For production, change to:
      // allow read, write: if false;
    }
  }
}
