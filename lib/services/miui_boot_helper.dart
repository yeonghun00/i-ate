import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:io';

/// MIUI Boot Helper - Flutter integration for MIUI boot detection and user guidance
/// 
/// This service handles the critical MIUI auto-start permission issue that prevents
/// elder safety monitoring from resuming after device reboot.
class MiuiBootHelper {
  static const String _tag = 'MiuiBootHelper';
  static const MethodChannel _channel = MethodChannel('elder_monitoring');
  
  /// Check if device is MIUI and needs special handling
  static Future<bool> isMiuiDevice() async {
    try {
      final result = await _channel.invokeMethod('isMiuiDevice');
      return result == true;
    } catch (e) {
      print('$_tag Error checking MIUI device: $e');
      // Fallback: check manufacturer
      return Platform.isAndroid && 
        (Platform.operatingSystemVersion.toLowerCase().contains('xiaomi') ||
         Platform.operatingSystemVersion.toLowerCase().contains('miui'));
    }
  }
  
  /// Check if boot receiver is working properly
  static Future<BootReceiverStatus> checkBootReceiverStatus() async {
    try {
      final result = await _channel.invokeMethod('checkBootReceiverStatus');
      return BootReceiverStatus.fromString(result ?? 'unknown');
    } catch (e) {
      print('$_tag Error checking boot receiver status: $e');
      return BootReceiverStatus.unknown;
    }
  }
  
  /// Check for missed boot and restore services if needed
  static Future<bool> checkForMissedBoot() async {
    try {
      final result = await _channel.invokeMethod('checkForMissedBoot');
      return result == true;
    } catch (e) {
      print('$_tag Error checking for missed boot: $e');
      return false;
    }
  }
  
  /// Open MIUI auto-start settings
  static Future<bool> openMiuiAutoStartSettings() async {
    try {
      final result = await _channel.invokeMethod('openMiuiAutoStartSettings');
      return result == true;
    } catch (e) {
      print('$_tag Error opening MIUI settings: $e');
      return false;
    }
  }
  
  /// Open battery optimization settings
  static Future<bool> openBatteryOptimizationSettings() async {
    try {
      final result = await _channel.invokeMethod('openBatteryOptimizationSettings');
      return result == true;
    } catch (e) {
      print('$_tag Error opening battery settings: $e');
      return false;
    }
  }
  
  /// Check if user needs to see MIUI guidance
  static Future<bool> shouldShowMiuiGuidance() async {
    if (!await isMiuiDevice()) return false;
    
    try {
      final result = await _channel.invokeMethod('shouldShowMiuiGuidance');
      return result == true;
    } catch (e) {
      print('$_tag Error checking guidance requirement: $e');
      
      // Fallback: check SharedPreferences
      final prefs = await SharedPreferences.getInstance();
      final guidanceShown = prefs.getBool('miui_guidance_shown') ?? false;
      final bootStatus = await checkBootReceiverStatus();
      
      return !guidanceShown || bootStatus != BootReceiverStatus.working;
    }
  }
  
  /// Mark MIUI guidance as shown
  static Future<void> markMiuiGuidanceShown() async {
    try {
      await _channel.invokeMethod('markMiuiGuidanceShown');
      
      // Also store in Flutter preferences
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('miui_guidance_shown', true);
      await prefs.setInt('miui_guidance_shown_time', DateTime.now().millisecondsSinceEpoch);
      
    } catch (e) {
      print('$_tag Error marking guidance shown: $e');
    }
  }
  
  /// Check if app needs post-boot activation (Android 12+ foreground service restrictions)
  static Future<bool> needsPostBootActivation() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getBool('needs_post_boot_activation') ?? false;
    } catch (e) {
      print('$_tag Error checking post-boot activation: $e');
      return false;
    }
  }
  
  /// Clear post-boot activation flag
  static Future<void> clearPostBootActivationFlag() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove('needs_post_boot_activation');
    } catch (e) {
      print('$_tag Error clearing post-boot flag: $e');
    }
  }
  
  /// Show comprehensive MIUI setup dialog
  static Future<void> showMiuiSetupDialog(BuildContext context) async {
    if (!await isMiuiDevice()) return;
    
    return showDialog<void>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return MiuiSetupDialog();
      },
    );
  }
  
  /// Show post-reboot activation dialog
  static Future<void> showPostBootActivationDialog(BuildContext context) async {
    return showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return PostBootActivationDialog();
      },
    );
  }
  
  /// Initialize MIUI boot detection on app start
  static Future<void> initializeOnAppStart() async {
    try {
      print('$_tag Initializing MIUI boot detection...');
      
      // Check for missed boot
      final missedBoot = await checkForMissedBoot();
      if (missedBoot) {
        print('$_tag ‚ö†Ô∏è Missed boot detected - services restored automatically');
      }
      
      // Start alternative boot detection systems
      await _channel.invokeMethod('startAlternativeBootDetection');
      print('$_tag ‚úÖ Alternative boot detection initialized');
      
    } catch (e) {
      print('$_tag Error initializing: $e');
    }
  }
}

/// Boot receiver status enumeration
enum BootReceiverStatus {
  working,
  neverWorked,
  blockedRecentBoot,
  unknown;
  
  static BootReceiverStatus fromString(String value) {
    switch (value.toLowerCase()) {
      case 'working': return BootReceiverStatus.working;
      case 'never_worked': return BootReceiverStatus.neverWorked;
      case 'blocked_recent_boot': return BootReceiverStatus.blockedRecentBoot;
      default: return BootReceiverStatus.unknown;
    }
  }
}

/// MIUI Setup Dialog Widget
class MiuiSetupDialog extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Row(
        children: [
          Icon(Icons.warning, color: Colors.orange, size: 28),
          SizedBox(width: 8),
          Text('üö® MIUI ÏÑ§Ï†ï ÌïÑÏöî', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
        ],
      ),
      content: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              'ÏÉ§Ïò§ÎØ∏ Í∏∞Í∏∞Îäî Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Ïï± Ïû¨Î∂ÄÌåÖ ÌõÑ ÏûêÎèô ÏãúÏûëÏùÑ Ï∞®Îã®Ìï©ÎãàÎã§.',
              style: TextStyle(fontWeight: FontWeight.w500, color: Colors.red[700]),
            ),
            SizedBox(height: 16),
            Text('Ïñ¥Î•¥Ïã† ÏïàÏ†Ñ Î™®ÎãàÌÑ∞ÎßÅÏù¥ Ïû¨Î∂ÄÌåÖ ÌõÑÏóêÎèÑ ÏûëÎèôÌïòÎ†§Î©¥:', style: TextStyle(fontWeight: FontWeight.w500)),
            SizedBox(height: 12),
            _buildStepItem('1. Î≥¥Ïïà Ïï± ‚Üí Ïï± Í¥ÄÎ¶¨ ‚Üí ÏûêÎèô ÏãúÏûë', '‚Ä¢ "ÏãùÏÇ¨ÌïòÏÖ®Ïñ¥Ïöî?" Ïï±ÏùÑ Ï∞æÏïÑ ÌôúÏÑ±Ìôî'),
            SizedBox(height: 8),
            _buildStepItem('2. Î∞∞ÌÑ∞Î¶¨ ÏÑ§Ï†ï ‚Üí Î∞∞ÌÑ∞Î¶¨ Ï†àÏïΩ', '‚Ä¢ "ÏãùÏÇ¨ÌïòÏÖ®Ïñ¥Ïöî?"Î•º "Ï†úÌïú ÏóÜÏùå"ÏúºÎ°ú ÏÑ§Ï†ï'),
            SizedBox(height: 8),
            _buildStepItem('3. ÏµúÍ∑º Ïï±ÏóêÏÑú Ï†àÎåÄ Ïä§ÏôÄÏù¥ÌîÑ Í∏àÏßÄ', '‚Ä¢ Ïï±ÏùÑ ÎÅÑÎ©¥ Î™®Îì† Î™®ÎãàÌÑ∞ÎßÅÏù¥ Ï§ëÎã®Îê©ÎãàÎã§'),
            SizedBox(height: 8),
            _buildStepItem('4. ÏÑ§Ï†ï Î≥ÄÍ≤Ω ÌõÑ', '‚Ä¢ Í∏∞Í∏∞Î•º Ìïú Î≤à Ïû¨ÏãúÏûë\n‚Ä¢ Ïû¨ÏãúÏûë ÌõÑ Ïù¥ Ïï±ÏùÑ Ïã§Ìñâ\n‚Ä¢ Î™®ÎãàÌÑ∞ÎßÅ ÏûëÎèô ÌôïÏù∏'),
            SizedBox(height: 16),
            Container(
              padding: EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.red[50],
                border: Border.all(color: Colors.red[200]!),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Text(
                '‚ö†Ô∏è Ïù¥ ÏÑ§Ï†ï ÏóÜÏù¥Îäî GPS Ï∂îÏ†ÅÍ≥º ÏÉùÏ°¥ Î™®ÎãàÌÑ∞ÎßÅÏù¥ Ïû¨Î∂ÄÌåÖ ÌõÑ ÏûëÎèôÌïòÏßÄ ÏïäÏäµÎãàÎã§!',
                style: TextStyle(fontWeight: FontWeight.bold, color: Colors.red[800]),
              ),
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: Text('ÎÇòÏ§ëÏóê'),
        ),
        ElevatedButton(
          onPressed: () async {
            Navigator.of(context).pop();
            await MiuiBootHelper.openMiuiAutoStartSettings();
            await MiuiBootHelper.markMiuiGuidanceShown();
          },
          style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
          child: Text('ÏÑ§Ï†ï Ïó¥Í∏∞', style: TextStyle(color: Colors.white)),
        ),
      ],
    );
  }
  
  Widget _buildStepItem(String title, String description) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(title, style: TextStyle(fontWeight: FontWeight.w600, color: Colors.blue[800])),
        Padding(
          padding: EdgeInsets.only(left: 12, top: 4),
          child: Text(description, style: TextStyle(fontSize: 13, color: Colors.grey[700])),
        ),
      ],
    );
  }
}

/// Post-Boot Activation Dialog Widget
class PostBootActivationDialog extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Row(
        children: [
          Icon(Icons.restart_alt, color: Colors.blue, size: 28),
          SizedBox(width: 8),
          Text('üì± Ïû¨Î∂ÄÌåÖ Í∞êÏßÄÎê®', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
        ],
      ),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Í∏∞Í∏∞Í∞Ä Ïû¨Î∂ÄÌåÖÎêòÏóàÏäµÎãàÎã§.',
            style: TextStyle(fontWeight: FontWeight.w500),
          ),
          SizedBox(height: 12),
          Text('Android 12+ Î≥¥Ïïà Ï†ïÏ±ÖÏúºÎ°ú Ïù∏Ìï¥ ÏùºÎ∂Ä Î™®ÎãàÌÑ∞ÎßÅ ÏÑúÎπÑÏä§Îäî ÏÇ¨Ïö©ÏûêÍ∞Ä Ïï±ÏùÑ Ïã§ÌñâÌï¥Ïïº ÏôÑÏ†ÑÌûà ÌôúÏÑ±ÌôîÎê©ÎãàÎã§.'),
          SizedBox(height: 16),
          Container(
            padding: EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.green[50],
              border: Border.all(color: Colors.green[200]!),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Text(
              '‚úÖ Ïï±ÏùÑ Ïã§ÌñâÌïòÏãúÎ©¥ Î™®Îì† ÏïàÏ†Ñ Î™®ÎãàÌÑ∞ÎßÅ ÏÑúÎπÑÏä§Í∞Ä ÏûêÎèôÏúºÎ°ú Î≥µÏõêÎê©ÎãàÎã§.',
              style: TextStyle(fontWeight: FontWeight.w500, color: Colors.green[800]),
            ),
          ),
        ],
      ),
      actions: [
        ElevatedButton(
          onPressed: () async {
            Navigator.of(context).pop();
            await MiuiBootHelper.clearPostBootActivationFlag();
            
            // Trigger service restoration
            try {
              const MethodChannel('elder_monitoring').invokeMethod('restoreServicesAfterBoot');
            } catch (e) {
              print('Error restoring services: $e');
            }
          },
          style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
          child: Text('ÏÑúÎπÑÏä§ ÌôúÏÑ±Ìôî', style: TextStyle(color: Colors.white)),
        ),
      ],
    );
  }
}