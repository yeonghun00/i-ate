rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // =======================================================
    // USER PROFILE COLLECTION
    // =======================================================
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // =======================================================
    // CONNECTION CODES - SECURE LOOKUP TABLE
    // =======================================================
    match /connection_codes/{codeId} {
      // Anyone authenticated can read connection codes (needed for family joining)
      allow read: if request.auth != null;
      
      // Only authenticated users can create connection codes (parent app)
      allow create: if request.auth != null && 
        request.resource.data.keys().hasAll(['familyId', 'createdAt']) &&
        request.resource.data.createdAt == request.time;
      
      // Only creator can delete (cleanup)
      allow delete: if request.auth != null && 
        resource.data.createdBy == request.auth.uid;
        
      // No updates allowed (immutable lookup table)
      allow update: if false;
    }

    // =======================================================
    // FAMILIES - CORE FAMILY DATA
    // =======================================================
    match /families/{familyId} {
      
      // FAMILY CREATION (Parent App with Anonymous Auth)
      allow create: if request.auth != null &&
        // Must include required fields
        request.resource.data.keys().hasAll(['familyId', 'connectionCode', 'elderlyName', 'memberIds', 'createdBy']) &&
        // Creator must be in memberIds
        request.auth.uid in request.resource.data.memberIds &&
        // Creator must be set correctly  
        request.resource.data.createdBy == request.auth.uid &&
        // Connection code must be 4 digits
        request.resource.data.connectionCode is string &&
        request.resource.data.connectionCode.matches('^[0-9]{4}$');

      // FAMILY READING
      allow read: if request.auth != null && (
        // Family members can read
        request.auth.uid in resource.data.memberIds ||
        // OR during initial joining process (before memberIds update)
        // This allows child app to read family info to display for approval
        isValidConnectionCodeUser(database, familyId)
      );

      // FAMILY UPDATES  
      allow update: if request.auth != null && (
        // Existing family members can update
        request.auth.uid in resource.data.memberIds ||
        // OR user is joining via valid connection code (child app joining)
        (isValidConnectionCodeUser(database, familyId) && isJoiningFamily())
      );

      // FAMILY DELETION (only by creator)
      allow delete: if request.auth != null && 
        resource.data.createdBy == request.auth.uid;

      // =======================================================
      // SUBCOLLECTIONS (meals, locations, etc.)
      // =======================================================
      match /{subcollection}/{document=**} {
        allow read, write: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds;
      }
    }

    // =======================================================
    // SUPPORTING COLLECTIONS
    // =======================================================
    
    // FCM Tokens for notifications
    match /fcmTokens/{tokenId} {
      allow read, write: if request.auth != null;
    }

    // User subscriptions
    match /subscriptions/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Analytics (write-only for apps, read for admin)
    match /analytics/{document=**} {
      allow read: if false; // Admin only
      allow write: if request.auth != null;
    }

    // App settings (read-only)
    match /appSettings/{document=**} {
      allow read: if request.auth != null;
      allow write: if false; // Admin only
    }

    // Test collection (development only)
    match /test/{document=**} {
      allow read, write: if request.auth != null;
    }
  }

  // =======================================================
  // HELPER FUNCTIONS
  // =======================================================
  
  // Check if user has valid connection code access to a family
  function isValidConnectionCodeUser(database, familyId) {
    // This would need to be implemented via Cloud Functions
    // since we can't query connection_codes by familyId in rules
    // For now, return false - use Cloud Functions for joining
    return false;
  }
  
  // Check if this is a family joining operation
  function isJoiningFamily() {
    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberIds', 'approved', 'approvedAt']) &&
           request.auth.uid in request.resource.data.memberIds &&
           !(request.auth.uid in resource.data.memberIds);
  }
}