rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isFamilyMember(familyId) {
      return request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.get('memberIds', []);
    }
    
    function isFamilyCreator(familyId) {
      return request.auth != null && 
        request.auth.uid == get(/databases/$(database)/documents/families/$(familyId)).data.get('createdBy', null);
    }

    // Validate family data integrity
    function isValidFamilyData(data) {
      return data.keys().hasAll(['familyId', 'connectionCode', 'elderlyName', 'memberIds']) &&
             data.memberIds is list &&
             data.memberIds.size() <= 10 && // Max 10 family members
             data.connectionCode is string &&
             data.connectionCode.size() == 4; // 4-digit codes only
    }

    // Connection codes with expiration
    match /connection_codes/{codeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.resource.data.keys().hasAll(['familyId', 'elderlyName', 'createdBy']) &&
        request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if false;
    }

    // Families with enhanced validation
    match /families/{familyId} {
      // CREATION with validation
      allow create: if request.auth != null && 
        isValidFamilyData(request.resource.data) &&
        request.auth.uid == request.resource.data.createdBy &&
        request.auth.uid in request.resource.data.memberIds;
      
      // READING with multiple access patterns
      allow read: if request.auth != null && (
        // Existing family members
        request.auth.uid in resource.data.get('memberIds', []) ||
        // Family creator during setup
        request.auth.uid == resource.data.get('createdBy', null) ||
        // Child app during joining (verified via connection code)
        exists(/databases/$(database)/documents/connection_codes/$(resource.data.connectionCode)) &&
        get(/databases/$(database)/documents/connection_codes/$(resource.data.connectionCode)).data.createdBy == resource.data.createdBy
      );
      
      // UPDATES with validation
      allow update: if request.auth != null && (
        // Family members updating
        (request.auth.uid in resource.data.get('memberIds', []) &&
         isValidFamilyData(request.resource.data)) ||
        // Child app joining (secure)
        (request.auth.uid in request.resource.data.get('memberIds', []) &&
         !request.auth.uid in resource.data.get('memberIds', []) &&
         request.resource.data.memberIds.size() <= resource.data.memberIds.size() + 1) ||
        // Family creator updates
        request.auth.uid == resource.data.get('createdBy', null)
      );
      
      // DELETION: Only family creators
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.get('createdBy', null);

      // Subcollections with rate limiting
      match /meals/{mealId} {
        allow read: if isFamilyMember(familyId);
        allow write: if isFamilyMember(familyId) && 
          // Rate limit: max 5 meals per day
          request.resource.data.get('timestamp', null) != null;
      }

      match /recordings/{document=**} {
        allow read, write: if isFamilyMember(familyId);
      }

      match /keys/{document=**} {
        allow read, write: if isFamilyMember(familyId);
      }

      match /{subcollection}/{document=**} {
        allow read, write: if isFamilyMember(familyId);
      }
    }

    // Other collections remain the same
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /fcmTokens/{tokenId} {
      allow read, write: if request.auth != null;
    }
    
    match /subscriptions/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /analytics/{document=**} {
      allow read, write: if request.auth != null;
    }
    
    match /appSettings/{document=**} {
      allow read: if request.auth != null;
      allow write: if false;
    }
    
    // Remove test collection in production
    match /test/{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}