rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ============================================
    // HELPER FUNCTIONS
    // ============================================

    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Check if user is the family creator
    function isFamilyCreator(familyId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/families/$(familyId)) &&
             request.auth.uid == get(/databases/$(database)/documents/families/$(familyId)).data.get('createdBy', '');
    }

    // Check if user is in memberIds (family member)
    function isFamilyMember(familyId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/families/$(familyId)) &&
             request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.get('memberIds', []);
    }

    // Check if this is a legacy family (for backward compatibility)
    function isLegacyFamily(familyId) {
      let familyDoc = get(/databases/$(database)/documents/families/$(familyId)).data;
      return !('memberIds' in familyDoc) ||
             familyDoc.memberIds == null ||
             familyDoc.get('memberIds', null) == null ||
             (familyDoc.memberIds is list && familyDoc.memberIds.size() == 0);
    }

    // ============================================
    // USERS COLLECTION
    // ============================================
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // ============================================
    // FAMILIES COLLECTION
    // ============================================
    match /families/{familyId} {

      // ============================================
      // READ ACCESS (RESTRICTED)
      // ============================================
      // GET operation (reading specific family)
      allow get: if isAuthenticated() && (
        // 1. User is a family member
        isFamilyMember(familyId) ||

        // 2. User is the creator (parent app before/after approval)
        isFamilyCreator(familyId) ||

        // 3. Legacy family access (for backward compatibility)
        isLegacyFamily(familyId) ||

        // 4. TEMPORARY: Child app during join via connection code
        // This is the security trade-off for the join process
        // User must know both familyId AND connection code to read
        (exists(/databases/$(database)/documents/families/$(familyId)) &&
         exists(/databases/$(database)/documents/connection_codes/$(get(/databases/$(database)/documents/families/$(familyId)).data.get('connectionCode', 'invalid'))))
      );

      // LIST operation (queries) - needed for account recovery and deletion
      allow list: if isAuthenticated() &&
                  request.query.limit <= 50 &&  // Limit results to prevent mass enumeration
                  (
                    // Account recovery query (isActive filter)
                    ('isActive' in request.query.where) ||
                    // Family deletion query (connectionCode filter)
                    ('connectionCode' in request.query.where)
                  );

      // ============================================
      // CREATE ACCESS
      // ============================================
      allow create: if isAuthenticated() &&
                    // Ensure creator is added to memberIds
                    request.resource.data.keys().hasAll(['familyId', 'connectionCode', 'elderlyName', 'createdBy', 'memberIds', 'isActive']) &&
                    request.auth.uid == request.resource.data.createdBy &&
                    request.auth.uid in request.resource.data.memberIds;

      // ============================================
      // UPDATE ACCESS (MULTIPLE SCENARIOS)
      // ============================================
      allow update: if isAuthenticated() && (

        // Scenario 1: Family members or creator updating operational fields
        ((isFamilyMember(familyId) || isFamilyCreator(familyId)) &&
         request.resource.data.diff(resource.data).affectedKeys()
         .hasOnly([
           // GPS and location
           'location', 'lastLocationUpdate',
           // Survival signal and activity
           'lastPhoneActivity', 'lastActivityType', 'updateTimestamp',
           'blastPhoneActivity', 'lastActive',
           // Meals
           'lastMeal', 'lastMealTime', 'todayMealCount',
           // Alerts
           'alerts', 'alertsTriggered', 'alertsCleared', 'alertsClearedBy',
           'survivalAlert',
           // Settings
           'settings',
           // Child app monitoring
           'lastChildAppActivity'
         ])) ||

        // Scenario 2: Child app joining (adding themselves to memberIds)
        (request.resource.data.diff(resource.data).affectedKeys()
         .hasOnly(['approved', 'approvedAt', 'approvedBy', 'memberIds', 'childInfo', 'childAppUserId']) &&
         // User is adding themselves to memberIds (not already present)
         request.auth.uid in request.resource.data.get('memberIds', []) &&
         !(request.auth.uid in resource.data.get('memberIds', []))) ||

        // Scenario 3: Legacy family migration
        (isLegacyFamily(familyId) &&
         request.resource.data.diff(resource.data).affectedKeys()
         .hasOnly(['approved', 'approvedAt', 'approvedBy', 'memberIds', 'childInfo']) &&
         'memberIds' in request.resource.data &&
         request.resource.data.memberIds is list &&
         request.resource.data.memberIds.size() > 0) ||

        // Scenario 4: Registered users with familyCodes (child app)
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyCodes != null &&
         resource.data.connectionCode in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyCodes &&
         request.resource.data.diff(resource.data).affectedKeys()
         .hasOnly(['survivalAlert', 'settings', 'lastChildAppActivity']))
      );

      // ============================================
      // DELETE ACCESS
      // ============================================
      allow delete: if isAuthenticated() && (
        isFamilyMember(familyId) ||
        isFamilyCreator(familyId)
      );

      // ============================================
      // SUBCOLLECTIONS
      // ============================================

      // Meals subcollection - RESTRICTED to family members
      match /meals/{mealDate} {
        allow read, write: if isAuthenticated() && (
          isFamilyMember(familyId) ||
          isFamilyCreator(familyId)
        );

        match /{document=**} {
          allow read, write: if isAuthenticated() && (
            isFamilyMember(familyId) ||
            isFamilyCreator(familyId)
          );
        }
      }

      // Recordings subcollection - RESTRICTED to family members
      match /recordings/{recordingId} {
        allow read, write: if isAuthenticated() && (
          isFamilyMember(familyId) ||
          isFamilyCreator(familyId)
        );

        match /{document=**} {
          allow read, write: if isAuthenticated() && (
            isFamilyMember(familyId) ||
            isFamilyCreator(familyId)
          );
        }
      }

      // Child devices subcollection - for FCM tokens
      match /child_devices/{deviceId} {
        allow read, write: if isAuthenticated() && (
          isFamilyMember(familyId) ||
          isFamilyCreator(familyId)
        );
      }
    }

    // ============================================
    // CONNECTION CODES COLLECTION
    // ============================================
    match /connection_codes/{codeId} {
      // Allow reading SPECIFIC codes (get operation)
      // This is needed for child app to validate codes
      allow get: if isAuthenticated();

      // ALLOW limited queries for uniqueness checking and connection code lookup
      // Simplified: Allow any authenticated query with reasonable limit
      allow list: if isAuthenticated() && request.query.limit <= 50;

      // Allow creating connection codes
      allow create: if isAuthenticated() &&
                    request.resource.data.keys().hasAll(['familyId', 'elderlyName', 'createdAt']);

      // Allow updating connection codes (for expiration, etc.)
      allow update: if isAuthenticated();

      // Allow deletion by family creator
      allow delete: if isAuthenticated() &&
                    exists(/databases/$(database)/documents/families/$(resource.data.familyId)) &&
                    (request.auth.uid == get(/databases/$(database)/documents/families/$(resource.data.familyId)).data.get('createdBy', '') ||
                     request.auth.uid in get(/databases/$(database)/documents/families/$(resource.data.familyId)).data.get('memberIds', []));
    }

    // ============================================
    // SUBSCRIPTIONS COLLECTION
    // ============================================
    match /subscriptions/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;

      match /events/{eventId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // ============================================
    // FCM TOKENS COLLECTION
    // ============================================
    match /fcmTokens/{tokenId} {
      // Users can manage their own tokens
      allow read: if isAuthenticated();

      allow write: if isAuthenticated() && (
        // Creating new token
        request.resource.data.get('userId', '') == request.auth.uid ||
        // Updating existing token
        resource.data.get('userId', '') == request.auth.uid
      );
    }

    // ============================================
    // ANALYTICS COLLECTION
    // ============================================
    match /analytics/{document} {
      // Allow creating analytics events
      allow create: if isAuthenticated();

      // Read only your own analytics
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.get('userId', '') ||
        (resource.data.get('familyId', null) != null &&
         isFamilyMember(resource.data.familyId))
      );

      // No updates or deletes
      allow update, delete: if false;

      match /{document=**} {
        allow read, write: if isAuthenticated();
      }
    }

    // ============================================
    // APP SETTINGS COLLECTION
    // ============================================
    match /appSettings/{document} {
      allow read: if isAuthenticated();
      allow write: if false; // Admin only
    }

    // ============================================
    // TEST COLLECTION (DISABLE IN PRODUCTION)
    // ============================================
    match /_test/{document=**} {
      // Set to false in production!
      allow read, write: if false;
    }
  }
}
